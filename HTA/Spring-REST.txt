REST(Representational State Transfer)
	- 자원(데이터)을 이름(자원을 표현하는 이름, URL이다)으로 구분하여 해당 자원의 상태(데이터)를 주고 받는 것(광의의 REST)
	- HTTP URL을 이용해서 자원의 이름을 정하고, HTTP Method를 이용해서 해당자원에 대한 작업을 지정하는 것(협의의 REST)
	- dependency에 jackson추가, @RestController, 응답은 ResponseEntity<>로 받음 

		Method		URL(자원의 이름)		서버로 보내는 데이터				서버로부터 받는 데이터
데이터 조회	GET		/rest/products/		없음						[{},{},{}]
데이터 조회	GET		/rest/products/{no}		없음						{}
데이터 추가	POST		/rest/products/		{"name":"맥북", "maker":"애플","price":1500000,...}	없음
데이터 삭제	DELETE		/rest/products/{no}		없음						없음
데이터 수정	PUT		/rest/products/{no}		{"name":"맥북", "maker":"애플","price":1400000,...}	없음


*) 기존에는 서버에서 요청에 맞는 html을 보내줬었다.
하지만 현재는 클라이언트의 종류(pc, 스마트폰, iptv 등등)가 너무 많아졌다.
기존의 방식대로는 각각 컨트롤러가 달라야하고 url도 다 달라져야 한다.
=> 모바일 기기등의 성능이 좋아졌기 때문에 데이터만 전달을 해줘도 각각 기기에서 페이지를 만들 능력이 생겼다.
	-> 하나의 컨트롤러에 하나의 url에 요청을 보낼 수 있게 됨

$.ajax({ type:"GET"	url:"" });
$.ajax({ type:"POST" url:"" });
$.ajax({ type:"DELETE" url:"" });
$.ajax({ type:"PUT" url:"" });

@RestController
@RequestMapping("/rest/products")
public class ProductController {
	@GetMapping
	public 데이터 조회() { ... }

	@GetMapping("/{no})
	public 데이터 조회() { ... }

	@PostMapping
	public void 추가() { ... }
}